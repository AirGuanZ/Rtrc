Material "Builtin/Surface/Diffuse"
{
	Texture2D Albedo;

	Pass
	{
		Tag "GBuffer"
		ShaderRef "Builtin/Surface/Diffuse"
	}
}

Shader "Builtin/Surface/Diffuse"
{

	#vert VSMain
	#frag FSMain

	#include "Builtin/Material/Common/GBuffer.hlsl"

	rtrc_group(Material)
	{
		rtrc_define(Texture2D<float3>, Albedo)
	};

	rtrc_group(Object)
	{
		rtrc_uniform(float4x4, localToWorld)
		rtrc_uniform(float4x4, worldToLocal)
		rtrc_uniform(float4x4, localToCamera)
		rtrc_uniform(float4x4, localToClip)
	};

	rtrc_push_constant(PS)
	{
		float4 albedo;
	};

	struct VsInput
	{
		float3 position : POSITION;
		float3 normal   : NORMAL;
		float2 uv		: TEXCOORD;
	};

	struct Vs2Fs
	{
		float4 clipPosition : SV_POSITION;
		float3 worldNormal  : WORLD_NORMAL;
		float2 uv			: TEXCOORD;
	};

	rtrc_sampler(AlbedoSampler, filter = linear, address = clamp)

	Vs2Fs VSMain(VsInput input)
	{
		Vs2Fs output = (Vs2Fs)0;
		output.clipPosition = mul(Object.localToClip, float4(input.position, 1));
		output.worldNormal = normalize(mul(float4(input.normal, 0), Object.worldToLocal).xyz);
		output.uv = input.uv;
		return output;
	}

	Builtin::GBufferPixelOutput FSMain(Vs2Fs input)
	{
		//float3 albedo = Albedo.Sample(AlbedoSampler, input.uv);
		float3 albedo = PushConstant.albedo.xyz;
		return Builtin::EncodeGBufferPixel(normalize(input.worldNormal), albedo, 0, 1);
	}

} // Shader "Builtin/Deferred/Diffuse"
