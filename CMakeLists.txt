CMAKE_MINIMUM_REQUIRED(VERSION 3.20)

PROJECT(RTRC-ALL)

#============= global =============

SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)

SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

#============= glfw =============

SET(GLFW_VULKAN_STATIC ON)
ADD_SUBDIRECTORY(External/glfw)
SET_TARGET_PROPERTIES(glfw update_mappings PROPERTIES FOLDER "External")

#============= fmt =============

ADD_SUBDIRECTORY(External/fmt)
SET_TARGET_PROPERTIES(fmt PROPERTIES FOLDER "External")

#============= mimalloc =============

ADD_SUBDIRECTORY(External/mimalloc-2.0.6)
SET_TARGET_PROPERTIES(mimalloc-static PROPERTIES FOLDER "External")

#============= vulkan =============

SET(RTRC_RHI_VULKAN ON)
#IF(RTRC_RHI_VULKAN)
#    FIND_PACKAGE(Vulkan REQUIRED)
#ENDIF()

#============= volk =============

SET(VOLK_HEADERS_ONLY ON)
ADD_SUBDIRECTORY(External/volk)

#============= vk-bootstrap =============

ADD_SUBDIRECTORY(External/vk-bootstrap)
SET_TARGET_PROPERTIES(vk-bootstrap PROPERTIES FOLDER "External")

#============= rtrc =============

FUNCTION(RTRC_SET_CXX_LANG_VERSION)
    SET(TARGET_NAME ${ARGV0})
    IF(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
        TARGET_COMPILE_DEFINITIONS(${TARGET_NAME} PUBLIC _CRT_SECURE_NO_WARNINGS)
        SET_PROPERTY(TARGET ${TARGET_NAME} PROPERTY CXX_STANDARD 23)
    ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND CMAKE_CXX_SIMULATE_ID MATCHES "MSVC")
        # TARGET_COMPILE_OPTIONS(${TARGET_NAME} PRIVATE "-Wno-microsoft-cast" "-Wno-unused-private-field")
        TARGET_COMPILE_DEFINITIONS(${TARGET_NAME} PRIVATE _CRT_SECURE_NO_WARNINGS)
        SET_PROPERTY(TARGET ${TARGET_NAME} PROPERTY CXX_STANDARD 23)
    ELSE()
        SET_PROPERTY(TARGET ${TARGET_NAME} PROPERTY CXX_STANDARD 20)
    ENDIF()
    SET_PROPERTY(TARGET ${TARGET_NAME} PROPERTY CXX_STANDARD_REQUIRED ON)
ENDFUNCTION()

FILE(GLOB_RECURSE RTRC_CPP_SRC
		"${CMAKE_CURRENT_SOURCE_DIR}/Source/*.cpp"
		"${CMAKE_CURRENT_SOURCE_DIR}/Source/*.inl"
		"${CMAKE_CURRENT_SOURCE_DIR}/Source/*.h")

FILE(GLOB_RECURSE RTRC_VULKAN_SRC
        "${CMAKE_CURRENT_SOURCE_DIR}/Source/Rtrc/RHI/Vulkan/*.cpp"
        "${CMAKE_CURRENT_SOURCE_DIR}/Source/Rtrc/RHI/Vulkan/*.inl"
        "${CMAKE_CURRENT_SOURCE_DIR}/Source/Rtrc/RHI/Vulkan/*.h")

IF(NOT RTRC_RHI_VULKAN)
    LIST(REMOVE_ITEM RTRC_CPP_SRC ${RTRC_VULKAN_SRC})
ENDIF()

ADD_LIBRARY(Rtrc STATIC ${RTRC_CPP_SRC})

FOREACH(_SRC IN ITEMS ${RTRC_CPP_SRC})
    GET_FILENAME_COMPONENT(SRC "${_SRC}" PATH)
    STRING(REPLACE "${CMAKE_CURRENT_SOURCE_DIR}/Source/Rtrc" "" _GRP_PATH "${SRC}")
    STRING(REPLACE "/" "\\" _GRP_PATH "${_GRP_PATH}")
    SOURCE_GROUP("${_GRP_PATH}" FILES "${_SRC}")
ENDFOREACH()

RTRC_SET_CXX_LANG_VERSION(Rtrc)

TARGET_INCLUDE_DIRECTORIES(Rtrc PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/Source")

TARGET_LINK_LIBRARIES(Rtrc PUBLIC mimalloc-static fmt glfw)

IF(RTRC_RHI_VULKAN)
	TARGET_LINK_LIBRARIES(Rtrc PUBLIC vk-bootstrap volk::volk_headers)
ENDIF()

#============= rhi flags =============

IF(RTRC_RHI_VULKAN)
    TARGET_COMPILE_DEFINITIONS(Rtrc PUBLIC RTRC_RHI_VULKAN)
ENDIF()

#============= samples =============

ADD_SUBDIRECTORY(Samples/HelloWorld)
